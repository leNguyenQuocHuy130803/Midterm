import { createContext } from 'react';

export interface LoggedInUser {
    id: number;
    name: string;
    email: string;
    age?: number;
}

// :ko d√πng omit
export interface NewUser {
    name: string;
    email: string;
    age?: number;
}

export const UserContext = createContext<{
    users: LoggedInUser[];

    // c√°ch 1 : d√πng bthg :
    addUser: (user: NewUser) => void;


    // c√°ch 2 : d√πng v·ªõi Omit
    // addUser: (user: Omit<LoggedInUser, 'id'>) => void;  // omit l√† thu·ªôc t√≠nh c·ªßa utility type  Omit<Type, Keys> :
    // t·∫°o ki·ªÉu m·ªõi t·ª´ ki·ªÉu c≈©, b·ªè ƒëi m·ªôt ho·∫∑c nhi·ªÅu tr∆∞·ªùng.
    // d√≤ng tr√™n nghƒ©a l√† : L·∫•y to√†n b·ªô c√°c tr∆∞·ªùng c·ªßa LoggedInUser, nh∆∞ng lo·∫°i b·ªè (omit) tr∆∞·ªùng id.
    // ban ƒë·∫ßu ta c√≥ :
    //     {
    //     id: number;
    //     name: string;
    //     email: string;
    //     age ?: number;
    // }
    // sau khi omit n√≥ s·∫Ω m·∫•t ƒëi tru√≤ng id 

    //     Ch·ª©c nƒÉng addUser th∆∞·ªùng d√πng ƒë·ªÉ:

    //         Th√™m m·ªôt user m·ªõi t·ª´ form nh·∫≠p(g·ªìm name, email, age)

    // Nh∆∞ng id s·∫Ω ƒë∆∞·ª£c t·ª± t·∫°o trong code(th∆∞·ªùng l√† auto increment, random ho·∫∑c UUID)

    // üëâ V√¨ v·∫≠y, b·∫°n kh√¥ng c·∫ßn truy·ªÅn id khi g·ªçi addUser.



}>({
    users: [],
    addUser: () => { },
});
